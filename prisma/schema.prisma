// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id             Int        @id @default(autoincrement())
  username       String     @unique
  firstname      String?
  lastname       String?
  email          String?    @unique
  password_hash  String
  profile_url    String?
  phone          String?
  workspaces     Workspace[]
  workspaceMember WorkspaceMember[]
  taskAssignees  TaskAssignee[]
  comments       Comment[]
  settings       Setting[]
  projectMember  ProjectMember[]
}

model Workspace {
  id         Int           @id @default(autoincrement())
  name       String
  createdAt  DateTime      @default(now())
  image      String?
  user       User          @relation(fields: [userId], references: [id])
  userId     Int
  members    WorkspaceMember[]
  projects   Project[]
}

model WorkspaceMember {
  userId      Int
  workspaceId Int
  user        User          @relation(fields: [userId], references: [id])
  Workspace   Workspace     @relation(fields: [workspaceId], references: [id])

  @@id([userId, workspaceId])
}

model Project {
  id           Int           @id @default(autoincrement())
  name         String
  workspace    Workspace     @relation(fields: [workspaceId], references: [id])
  workspaceId  Int
  members      ProjectMember[]
  boards       Board[]
}

model ProjectMember {
  projectId  Int
  userId     Int
  role       String?
  user       User          @relation(fields: [userId], references: [id])
  project    Project       @relation(fields: [projectId], references: [id])

  @@id([projectId, userId])
}

model Board {
  id         Int      @id @default(autoincrement())
  name       String
  position   Int
  project    Project  @relation(fields: [projectId], references: [id])
  projectId  Int
  tasks      Task[]
}

model Task {
  id          Int        @id @default(autoincrement())
  name        String
  deadline    DateTime?
  label       String?
  board       Board      @relation(fields: [boardId], references: [id])
  boardId     Int
  taskTags    TaskTag[]
  taskAssigns TaskAssignee[]
  comments    Comment[]
}

model TaskTag {
  taskId  Int
  tagId   Int
  Task    Task  @relation(fields: [taskId], references: [id])
  Tag     Tag   @relation(fields: [tagId], references: [id])

  @@id([taskId, tagId])
}

model Tag {
  id    Int     @id @default(autoincrement())
  name  String  
  tasks TaskTag[]
}

model TaskAssignee {
  taskId  Int
  userId  Int
  Task    Task  @relation(fields: [taskId], references: [id])
  User    User  @relation(fields: [userId], references: [id])

  @@id([taskId, userId])
}

model Comment {
  id         Int       @id @default(autoincrement())
  text       String
  createdAt  DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id])
  task       Task      @relation(fields: [taskId], references: [id])
  userId     Int
  taskId     Int
}

model Setting {
  id        Int   @id @default(autoincrement())
  theme     String?
  user      User  @relation(fields: [userId], references: [id])
  userId    Int
}
